#!/usr/bin/env ruby
#
# projecteuler.net
#
# problem 297
#
# Each new term in the Fibonacci sequence is generated by adding the
# previous two terms.
# Starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13,
# 21, 34, 55, 89.
#
# Every positive integer can be uniquely written as a sum of
# nonconsecutive terms of the Fibonacci sequence. For example, 100 = 3 +
# 8 + 89.
# Such a sum is called the Zeckendorf representation of the number.
#
# For any integer n>0, let z(n) be the number of terms in the Zeckendorf
# representation of n.
# Thus, z(5)= 1, z(14) = 2, z(100) = 3 etc.
# Also, for 0 < n < 10^6, sum(z(n)) = 7894453.
#
# Find sum(z(n)) for 0 < n < 10^17.
#

class PE297
    def initialize
        @sumzfibo = [0, 1, 2]
        @fibo = [0, 0, 1]
    end

    def sumz(n)
        if n <= 3
            return @sumzfibo[n]
        else
            i = 1
            while @fibo[i] <= n do
                i += 1
            end
        end
        i -= 1
        return @sumzfibo[i] + sumz(n - @fibo[i]) + n - @fibo[i]
    end

    def run
        @fibo = [0, 0, 1]
        @sumzfibo = [0, 1, 2]
        max = 100
        i = 2
        while @fibo[i] <= max do
            @fibo[i] = @fibo[i-1] + @fibo[i-2]
            @sumzfibo[i] = @sumzfibo[i-1] + @sumzfibo[i-2] + @fibo[i-2]
        end
        i += 1
        return sumz(max)
    end
end

a = PE297.new
a.run

